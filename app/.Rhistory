3+1
1*2
15*1626289/764273627+917381731-13232323
x=10
library(dplyr)
mtcars %>%
mtcars %>%
data(mtcars)
mtcars
View(mtcars)
help(mtcars)
help(mtcars)
#función SELECT (a este símbolo se le llama pipets)
mtcars %>% select('mpg', 'cyl', 'wt', 'am')
#función SELECT (a este símbolo se le llama pipets)
#se guardará en una variable
base2 = mtcars %>% select('mpg', 'cyl', 'wt', 'am')
View(base2)
View(mtcars)
View(base2)
#Filtrar filas de una DB según una condición
#se buscarán los coches con transmisión automática
#en la ayuda de la base mtcars se indica que am automática es = 0 y, manual = 1
automatic = mtcars %>% filter('am' == 0)
View(automatic)
#Filtrar filas de una DB según una condición
#se buscarán los coches con transmisión automática
#en la ayuda de la base mtcars se indica que am automática es = 0 y, manual = 1
automatic = mtcars %>% filter(am == 0)
#Filtrar filas de una DB según una condición
#se buscarán los coches con transmisión automática
#en la ayuda de la base mtcars (help(mtcars) se escribe en la consola)
#se indica que am automática es = 0 y, manual = 1
automatic = mtcars %>% filter(am == 0)
View(automatic)
manual = mtcars %>% filter(am == 1)
View(manual)
automatic_8 = mtcars %>% filter(am == 0, cyl == 8)
View(automatic_8)
automatic_8 = mtcars %>% filter(am == 0, cyl == 8) %>%
select('mpg', 'cyl', 'wt', 'am')
View(automatic_8)
#ARRANGE arregla algo de acuerdo a un orden
#se verá a continuación cuáles son los coches automáticos de 8 cilindros
#que den más millas por galón (mpg)
automatic_8 %>% arrange(mpg)
automatic_8 %>% arrange(desc(mpg))
#que dé los 3 primeros guarándolos en una variable
top_a8 = automatic_8 %>% arrange(desc(mpg))
View(top_a8)
head(top_a8,3)
View(mtcars)
#MUTATE:
#crea una nueva columa a una DB para ayudar a hacer una regresión estadística
#se hará una que dé cuántos mpg hay dado el peso del coche
mtcars %>% mutate(efficiency = mpg/wt)
#MUTATE:
#crea una nueva columa a una DB para ayudar a hacer una regresión estadística
#se hará una que dé cuántos mpg hay dado el peso del coche
#debe guardarse como una variable con el mismo nombre que la DB
mtcars = mtcars %>% mutate(efficiency = mpg/wt)
#que me muestre los coches más eficientes
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(efficiency)
#en orden descendiente
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(desc(efficiency))
mtcars = mtcars %>%
filter(am == 0) %>%
mutate(efficiency = mpg/wt)%>%
arrange(efficiency)
mtcars = mtcars %>%
filter(am == 1) %>%
mutate(efficiency = mpg/wt)%>%
arrange(efficiency)
mtcars = mtcars %>%
filter(am == 0) %>%
mutate(efficiency = mpg/wt)%>%
arrange(efficiency)
mtcars = mtcars %>%
filter(am == 0) %>%
mutate(efficiency = mpg/wt)%>%
arrange(efficiency)
mtcars = mtcars %>%
filter(am==0) %>%
mutate(efficiency = mpg/wt)%>%
arrange(desc(efficiency))
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(desc(efficiency))
mtcars %>%
data(mtcars)
#función SELECT (a este símbolo se le llama pipets)
#se guardará en una variable con únicamente 4 columnas
#SELECT sirve para seleccionar columnas y reducir el tamaño de una DB
base2 = mtcars %>% select('mpg', 'cyl', 'wt', 'am')
#función SELECT (a este símbolo se le llama pipets)
#se guardará en una variable con únicamente 4 columnas
#SELECT sirve para seleccionar columnas y reducir el tamaño de una DB
base2 = mtcars %>% select('mpg', 'cyl', 'wt', 'am')
View(mtcars)
mtcars %>%
data(mtcars)
force(mtcars)
base2 = mtcars %>% select('mpg', 'cyl', 'wt', 'am')
View(mtcars)
View(mtcars)
library(dplyr)
mtcars %>%
data(mtcars)
force(mtcars)
base2 = mtcars %>% select('mpg', 'cyl', 'wt', 'am')
automatic = mtcars %>% filter(am == 0)
manual = mtcars %>% filter(am == 1)
automatic_8 = mtcars %>% filter(am == 0, cyl == 8) %>%
select('mpg', 'cyl', 'wt', 'am')
automatic_8 %>% arrange(mpg)
automatic_8 %>% arrange(desc(mpg))
top_a8 = automatic_8 %>% arrange(desc(mpg))
head(top_a8,3)
mtcars = mtcars %>% mutate(efficiency = mpg/wt)
View(mtcars)
#MUTATE:
#crea una nueva columa a una DB para ayudar a hacer una regresión estadística
#se hará una que dé cuántos mpg hay dado el peso del coche
#debe guardarse como una variable con el mismo nombre que la DB
mtcars = mtcars %>% mutate(efficiency = mpg/wt)
#que muestre los coches más eficientes
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(efficiency)
#en orden descendiente
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(desc(efficiency))
mtcars = mtcars %>%
filter(am==0) %>%
mutate(efficiency = mpg/wt) %>%
arrange(desc(efficiency))
mtcars = mtcars %>%
filter(am==1) %>%
mutate(efficiency = mpg/wt) %>%
arrange(desc(efficiency))
mtcars = mtcars %>%
filter(am==0) %>%
mutate(efficiency = mpg/wt) %>%
arrange(desc(efficiency))
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
library(dplyr)
mtcars %>%
data(mtcars)
base2 = mtcars %>% select('mpg', 'cyl', 'wt', 'am')
automatic = mtcars %>% filter(am == 0)
manual = mtcars %>% filter(am == 1)
automatic_8 = mtcars %>% filter(am == 0, cyl == 8) %>%
select('mpg', 'cyl', 'wt', 'am')
automatic_8 %>% arrange(mpg)
automatic_8 %>% arrange(desc(mpg))
top_a8 = automatic_8 %>% arrange(desc(mpg))
head(top_a8,3)
mtcars = mtcars %>% mutate(efficiency = mpg/wt)
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(efficiency)
mtcars = mtcars %>% mutate(efficiency = mpg/wt) %>% arrange(desc(efficiency))
mtcars = mtcars %>%
filter(am==0) %>%
mutate(efficiency = mpg/wt) %>%
arrange(desc(efficiency))
View(mtcars)
mtcars %>%
data(mtcars)
View(mtcars)
#Pedir resúmenes estadísticos con SUMARISE
#nota: en este ejercicio se ha llamado de nuevo a la DB original con data(mtcars)
#MEAN es la media
mtcars %>% sumarise(avg_mpg = mean(mpg))
#Pedir resúmenes estadísticos con SUMMARISE
#nota: en este ejercicio se ha llamado de nuevo a la DB original con data(mtcars)
#MEAN es la media
mtcars %>% summarise(avg_mpg = mean(mpg))
#Pedir resúmenes estadísticos con SUMMARISE
#nota: en este ejercicio se ha llamado de nuevo a la DB original con data(mtcars)
#MEAN es la media
#así la variable "avg_mpg" indicará el promedio de mpg
mtcars %>% summarise(avg_mpg = mean(mpg))
#desviación estándar
mtcars %>% summarise(avg_mpg = mean(mpg), sd_mpg = sd(mpg))
mean(mtcars$mpg)
#eficiencia media
mtcars %>% summarise(avg_eff = mean(mpg/wt), sd_eff = sd(mpg/wt))
#descripción de una DB con SUMMARY
summary(mtcars)
mtcars %>%
group_by(cyl) %>%
summarise(mean_mpg = mean(mpg), count = n())
base = mtcars %>%
group_by(cyl) %>%
summarise(mean_mpg = mean(mpg), count = n())
model = lm(data = base, formula = avg_mpg ~ cyl)
base = mtcars %>%
group_by(cyl) %>%
summarise(mean_mpg = mean(mpg), cpunt = n())
model = lm(data = base, formula = avg_mpg ~ cyl)
base = mtcars %>%
group_by(cyl) %>%
summarise(mean_mpg = mean(mpg), count = n())
model = lm(data = base, formula = avg_mpg ~ cyl)
base = mtcars %>% group_by(cyl) %>% summarise(avg_mpg = mean(mpg), count = n())
model = lm(data = base, formula = avg_mpg ~ cyl)
summary(model)
base = mtcars %>% group_by(cyl) %>% summarise(avg_mpg = mean(mpg), count = n())
setwd("C:/Users/bonif/Downloads/Shiny_ML_Dashboard/app")
shiny::runApp(".")
exit
